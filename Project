프로젝트 개요
 - 현재 대부분의 데스크탑 컴퓨터에 구현되어있는 Wake On LAN(WOL)을 Local Network이 아닌 Wide Area Network에서 실행하여 먼 원격지에서도
   컴퓨터를 부팅시킨다.
   
프로젝트에 사용한 것들(프로그램, 혹은 물리적 장치)
  - Home Desktop(windows10), Laptop(windows10), WireShark, C(visual basic)
 
프로젝트 구성
  - Desktop과 Laptop은 같은 Local network내에 있지 않도록 구성한다.
  - Laptop에서 WOL프로토콜의 Destination Address와 패킷의 내용을 재구성하여 Desktop의 원격 부팅을 시도한다.
  
프로젝트의 전반적 진행순서
 - 프로토콜과 통신의 이해
   -> 연결 상태와 패킷들의 흐름 파악
 - 패킷 전송 방식 이해
   -> Layers, 각종 라우터들과 WAN의 구성, ISP
 - 패킷 종류 이해
   -> 인터넷 연결 구성에서 ICMP프로토콜들의 역할과 연결상태 확신을 위한 패킷 transaction 이해 ex) ARP, RARP, ...
 - 패킷 구성 이해
   -> 패킷에 따른 데이터 형식, 각각의 부분적 데이터들이 무슨 역할을 하는가.
 - 패킷 구성
   -> 이해한 패킷 구성을 바탕으로 바르게 전송 되며 물리적이고 논리적인 Layer별로 막힘이 없이 패킷이 전송되도록 구성
 - 네트워크 제약조건 분석
   -> 방화벽(OS), NAT, 네트워크 구성에 따른 ISP의 포트 블럭 등
 - 문제 발생과 그에 대한 현상 분석
   -> Local network 내의 패킷 전송과 Wide area network간의 패킷 전송 차이.
   
   
어려웠던 점
  - 패킷을 송신하는 과정에서 패킷이 정상적으로 도착하지 않은 경우가 많았는데, 이 이유를 찾아내는 것이 보통 일이 아니였다.
  - NAT와 공유기에서 제공하는 DMZ의 연관성에 대한 이해
  - 패킷을 올바르게 구성하는 것
  
프로젝트 소감
  - 단순히 '네트워크'라는 단어로만 말하기에는 너무나 많은 네트워크 요소들이 존재한다. 이것들을 한눈에 파악하게 될 수 있는 계기가 되었다.
    패킷이 도달하지 않는 이유를 알아내기 위해 정말 많은 시도들을 한 것 같다. 직접 내 네트워크에 포트스캐닝을 하여 포트가 열려있는지, ISP에 전화하여
    포트가 올바르게 열려있는것이 맞는지, 포트포워딩은 올바르게 된 것인지, Network Interface Card가 데이터를 받긴 한건지, OS까지 데이터가 도달하였는데
    방화벽이 막고 있는 것인지, 네트워크 통신 중간단에서 혼잡에 의해 패킷이 막혔는지, 패킷이 컴퓨터에서 출발하였다면 첫번째 게이트웨이까지 데이터가 도착은 한
    것인지, 네트워크 연결이 제대로 되어 있는 것인지 온갖 ICMP프로토콜은 다 구성해서 사용해보고, 프로토콜 종류를 조사하여 IPinIP 패킷을 이용한 터널링도 시도
    해보고, 네트워크가 연결된 경우의 수많은 상황에 대해 답을 찾으려는 시도를 해 보았다. 그 어떤 것도 뚜렷한 것이 없었다.
    
    결론적으로 이 프로젝트의 제일 큰 걸림돌은 NAT였다. 현재 IPv4의 한계를 아주 효과적으로 커버해주고 보안기능마저 추가해주는 이 기능이, 공유기의 
    Local network의 주소들을 관리해주는 table에서 컴퓨터의 전원이 꺼지면 60초 이후에는 DMZ로 설정해둔 해당 컴퓨터의 로컬네트워크 주소를 테이블에서 
    공유기가 스스로 지워버리는 현상과 맞물려서 데이터의 전송을 막고 있던 것이였다. 이 현상을 막기위해 Global IP를 Desktop에 직접 할당해버리는 
    S-DMZ 기능을 공유기를 통해서 설정하고 패킷을 구성해서 송신하면 부팅이 매우 잘 되는 것을 알 수 있다.
    
    하지만 이 설정을 평소에도 해두고 다닌다면 (포트가 열려있는것과 동시에)네트워크 보안이 매우 취약해지며 NAT기능의 로컬 다중 IP제공 기능을 이용할 수 
    없다.
    S-DMZ구성을 통해 부팅을 성공적으로 하였으므로 패킷 전송은 성공적이였으며, 일정 조건 하에 프로젝트는 성공하였다고 볼 수 있다.
    이 현상을 근본적으로 해결하기 위해 공유기의 펌웨어를 보고 싶었다. 하지만 소스가 찾기가 매우 어렵고 프로젝트 제출 기간까지 시간이 얼마 남지 않아서 그 
    부분까지는 가지 못했다. 분명 공유기는 리눅스기반 펌웨어인 것으로 알고있고, GNU에서는 이 소스코드를 공개하라고 되어있는 것으로 알고 있는데,
    이로 인해 소스를 올린 것 같긴 하지만 데이터가 문제가 있는지 제대로 볼 수가 없었고, 멀쩡한 코드를 찾기가 힘들었다. 
    로컬 네트워크 테이블관리 알고리즘을 살짝만 건드리면 될 것 같다는 생각이 들었었는데, 나중에라도 이 소스코드를 구해볼 의향이 있다.
